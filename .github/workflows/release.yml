name: Build and release binaries.

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
      - 'nightly'
      - "!*-dev.*"
      - '!vscode@*'
      - '!vim@*'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/release.yml'

concurrency:
  group: ${{ github.workflow_ref }}-${{ github.head_ref || github.ref_name }}

  # If this is enabled it will cancel current running and start latest
  cancel-in-progress: true

env:
  RUST_TOOLCHAIN: 1.76.0

jobs:
  release-binary:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        binary:
          - aarch64-apple-darwin
          - x86_64-manylinux2014
          - x86_64-windows-msvc
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: aarch64-apple-darwin
            build_args: --no-default-features --features prod
          - os: buildjet-2vcpu-ubuntu-2204
            target: x86_64-unknown-linux-gnu
            binary: x86_64-manylinux2014
            container: quay.io/pypa/manylinux2014_x86_64
            build_args: --no-default-features --features static-ssl,prod
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: x86_64-windows-msvc
            build_args: --no-default-features --features prod
            ext: .exe

    env:
      SCCACHE_GHA_ENABLED: true
      RUSTC_WRAPPER: sccache
      CARGO_INCREMENTAL: 0
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          components: clippy

      - name: Set default rust version
        run: rustup default ${{ env.RUST_TOOLCHAIN }}

      - name: Sccache cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.4.0"

      - name: Cargo registry cache
        uses: actions/cache@v3
        with:
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-${{ github.sha }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}-
            cargo-${{ runner.os }}-
          path: |
            ~/.cargo/registry
            ~/.cargo/git

      - name: Prepare build environment for macOS & Linux
        run: bash ./ci/prepare_build_environment.sh
        if: runner.os != 'Windows'

      - name: Prepare build environment for Windows
        run: ./ci/prepare_build_environment.ps1
        if: runner.os == 'Windows'

      - name: Bulid release binary
        run: cargo build ${{ matrix.build_args }} --release --target ${{ matrix.target }} --package tabby

      - name: Rename release binary
        run: mv target/${{ matrix.target }}/release/tabby${{ matrix.ext }} tabby_${{ matrix.binary }}${{ matrix.ext }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          retention-days: 3
          name: tabby_${{ matrix.binary }}${{ matrix.ext }}
          path: tabby_${{ matrix.binary }}${{ matrix.ext }}

  package-win-cuda:
    runs-on: ubuntu-latest
    env:
      LLAMA_CPP_VERSION: b3571
    needs: [release-binary]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Package CUDA 11.7
        run: >
          # Get the current release version, prefer the tag name, fallback to commit sha
          version="${{ github.ref_name }}"
          [ -z "$version" ] && version="${GITHUB_SHA::8}"
          LLAMA_CPP_PLATFORM=cuda-cu11.7.1-x64 OUTPUT_NAME=tabby_${version}_x86_64-windows-msvc-cuda117 ./ci/package-win.sh

      - name: Package CUDA 12.2
        run: >
          # Get the current release version, prefer the tag name, fallback to commit sha
          version="${{ github.ref_name }}"
          [ -z "$version" ] && version="${GITHUB_SHA::8}"
          LLAMA_CPP_PLATFORM=cuda-cu12.2.0-x64 OUTPUT_NAME=tabby_${version}_x86_64-windows-msvc-cuda122 ./ci/package-win.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          retention-days: 3
          name: dist
          path: dist/

  create-release:
    needs: [release-binary, package-win-cuda]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Creating distribution bundles
        run: >
          get_file_extension() {
            local filename="$1"
            # Check if the file has an extension
            if [[ "$filename" == *.* && ! "$filename" == .* ]]; then
              echo ".${filename##*.}"
            else
              echo ""
            fi
          }

          mkdir -p dist

          for tabby in tabby_*/tabby_*; do
            tabbyb=$(basename $tabby)
            extname=$(get_file_extension $tabbyb)

            tabbyn=${tabbyb%.*}

            tabbyv=${tabbyn#tabby_}

            # Get the current release version, prefer the tag name, fallback to commit sha
            version="${{ github.ref_name }}"
            [ -z "$version" ] && version="${GITHUB_SHA::8}"

            echo "Creating bundle for $tabbyv"
            release_dir=tabby_${version}_${tabbyv}
            mkdir -p $release_dir
            cp $tabby $release_dir/tabby${extname}

            # Release zip for Windows, tar.gz for macOS and Linux
            # use `extname` to determine the platform
            if [[ "$extname" == ".exe" ]]; then
              zip -r $release_dir.zip $release_dir
              mv $release_dir.zip dist/
            else
              chmod +x $release_dir/tabby${extname}
              tar zcvf $release_dir.tar.gz $release_dir
              mv $release_dir.tar.gz dist/
            fi
            rm -rf "$release_dir"
          done

      - name: Display structure of created files
        run: ls -R dist

      - name: Determine is stable release
        run: |
          if [[ ${{ github.ref_name }} =~ ^v@[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "STABLE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "STABLE_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Check if stable release
        run: echo "Stable Release is ${{ env.STABLE_RELEASE }}"

      - uses: ncipollo/release-action@v1
        if: github.event_name == 'push'
        with:
          allowUpdates: true
          prerelease: ${{ env.STABLE_RELEASE == 'false' }}
          makeLatest: ${{ env.STABLE_RELEASE == 'true' }}
          artifacts: "dist/tabby_*.zip,dist/tabby_*.tar.gz"
          tag: ${{ github.ref_name }}
          removeArtifacts: true
